<script lang="ts">
	import FooterNavigation from "$components/FooterNavigation.svelte";
    import Preview from "$components/Preview.svelte";
    import SingleElimCustomHeader from "$components/demos/single-elim-custom-round-header.svelte";
    import Title from "$components/Title.svelte";
    import Note from "$components/Note.svelte";
    import SlotPropsTable from "$components/SlotPropsTable.svelte";
</script>

<Title class="mb-4">

# Customizable Components

Brackets provide flexible customization for key visual elements. You can 
override default components while maintaining the core bracket logic.

</Title>

## Customization Basics

Use named slots with props to replace default components:

```svelte
<script lang="ts">
    import MyHeader from "./MyHeader.svelte";
    import type MyProps from "./MyProps.ts";

    let data: MyProps = { /* data with custom round interface */ };
</script>

<SingleEliminationBracket {data}>
    <div slot="header" let:round><MyHeader {round}/></div>
</SingleEliminationBracket>
```

## Default Components

Components that are used out of the box can be found [here](https://github.com/autriz/svelte-tournament-brackets/tree/master/src/lib/brackets/components). 
These components are not customizable, but you can copy them and customize them however you see fit.

## Customizable Components

Below are all named props that can be customized.

### Round Header

#### How to use

```svelte
<slot slot="header" let:round>...</slot>
```

#### Properties

<SlotPropsTable schema="header" />

### Match

#### How to use

```svelte
<slot 
    slot="match"
    let:match
    let:indices
    let:entrant1
    let:entrant2
    let:isTopHovered
    let:isBottomHovered
    let:isMatchHovered
    let:onMatchClick
    let:onEnter
    let:onLeave
>...</slot>
```

#### Properties

<SlotPropsTable schema="match" />

### Connector

#### How to use

```svelte
<slot
    slot="connector"
    let:topMatchPosition
    let:bottomMatchPosition
    let:currentMatchPosition
    let:isTopHighlighted
    let:isBottomHighlighted
    let:config
>...</slot>
```

#### Properties

<SlotPropsTable schema="connector" />

<Note>

Double Elimination Bracket has other more specific slots

- `winner-header`
- `finals-header`
- `winner-match`
- `loser-match`
- `finals-match`
- `winner-connector`
- `loser-connector`
- `finals-connector`

If provided, they will override non-specific slots

</Note>

<!-- TODO: Note about double elim bracket -->

<FooterNavigation
	previous={{ 
        href: "/docs/getting-started", 
        title: "Getting Started" 
    }}
	next={{ 
        href: "/docs/extendable-data", 
        title: "Extendable Data" 
    }}
/>
