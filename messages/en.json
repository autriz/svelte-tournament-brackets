{
    "$schema": "https://inlang.com/schema/inlang-message-format",
    "home": "Home",
    "docs": "Docs",
    "changeLanguage": "Change language",
    "toggleThemeDark": "Toggle dark mode",
    "toggleThemeLight": "Toggle light mode",
    "goToGitHub": "Go to GitHub page",
    "gettingStarted": "Getting Started",
    "installation": "Installation",
    "installationText": "Install package with your package manager of choice:",
    "createAComponent": "Create a component",
    "createAComponentText": "Bracket can be placed with no setup, just import it and give it some data to work with:",
    "customizableComponents": "Customizable Components",
    "customizableComponentsSubText": "Brackets provide flexible customization of key visual elements. Default components can be overridden while maintaining the core bracket logic.",
    "defaultComponents": "Default Components",
    "defaultComponentsText1": "Components that are used out of the box can be found ",
    "defaultComponentsLink": "here",
    "defaultComponentsText2": ". These components are unstyled, but you can style them using data attributes shown below:",
    "defaultComponentsText3": "or you can use styles used on this page: ",
    "createYourOwn": "Create Your Own",
    "createYourOwnText": "If you have your own vision of what your bracket should look like, you can use named slots to introduce custom components.",
    "roundHeader": "Round Header",
    "match": "Match",
    "connector": "Connector",
    "howToUse": "How to use",
    "properties": "Properties",
    "note": "Note",
    "note1Text1": "Double Elimination Bracket has other more specific slots:",
    "note1Text2": "If provided, they will override non-specific slots.",
    "extendableTypes": "Extendable Types",
    "extendableTypesSubText": "The library allows for flexible type extensions to help you suit your needs and data requirements.",
    "baseTypes": "Base types",
    "baseTypesText1": "Library exposes",
    "baseTypesLink": "these base types",
    "baseTypesText2": "that used to structure data object. These are bare necessities to generate a bracket.",
    "howToExtend": "How to extend",
    "howToExtendText1": "For example we will look at",
    "howToExtendText2": "interface and try to extend it.",
    "howToExtendText3": "As we can see,",
    "howToExtendText4": "property is",
    "howToExtendText5": ", because statuses may differ from one implementation to another. We can extend this base interface and change status property type to the one we need.",
    "howToExtendText6": "And add our extended interface to the needed",
    "howToExtendText7": " interface as generic.",
    "basics": "Basics",
    "customization": "Customization",
    "components": "Components",
    "clickElementToSeeAttribute": "Click to see element with that attribute",
    "onThisPage": "On this page",
    "preview": "Preview",
    "code": "Code",
    "copyCode": "Copy code",
    "previousPage": "Previous page",
    "nextPage": "Next page",
    "errorNotFound": "Requested page not found",
    "errorInternal": "Internal Server Error",
    "errorGoToDocs": "Go to docs",
    "defaultTitle": "Docs",
    "defaultDescription": "Tournament bracket visualizer for Svelte.",
    "gettingStartedDescription": "What components are available in Svelte Tournament Bracket and how to use them.",
    "customizableComponentsDescription": "How developer can customize already existing components or introduce their own.",
    "extendableTypesDescription": "What data interfaces exist and how developer can extend them.",
    "showNavigation": "Show Navigation",
    "goToDocs": "Go to docs"
}